-- *********LMS****************

--############ creating user on oracle instance for custom schema
alter session set "_ORACLE_SCRIPT"=true;
-- Create user 
create user lms IDENTIFIED BY lms;
 

-- ################################################################	
-- DCL: Grant Control
-- ################################################################
   grant create session to lms;     
   grant create table to lms; 
   grant create view to lms;
   grant create any trigger to lms;
   grant create any procedure to lms;
   grant create SEQUENCE to lms;
   grant create SYNONYM to lms;
   grant all PRIVILEGES to lms;
   grant connect to lms;
   grant RESOURCE to lms;
   grant dba to lms;

------------------------PATRON------------------------------------------
--drop table Users;

truncate table users;
select * from users;
drop table users;


CREATE TABLE Users(
USER_ID NUMBER GENERATED by
default as IDENTITY (START WITH 100) PRIMARY KEY,
NAME VARCHAR2(40) NOT NULL,
PASSWORD VARCHAR2(40) NOT NULL,
EMAIL VARCHAR2(40) NOT NULL,
ADDRESS VARCHAR2(100) NOT NULL,
GENDER VARCHAR2(10) NOT NULL,
PHONE VARCHAR2(15) NOT NULL,
AGE NUMBER,
DEPOSITE NUMBER,
MEMBER_START date,
MEMBER_END date
);

INSERT INTO Users (USER_ID, NAME, password, Email, ADDRESS, GENDER, PHONE, AGE, DEPOSITE, MEMBER_START, MEMBER_END)
VALUES
(100, 'John Doe', 'password123', 'john@example.com', '123 Main St, City', 'Male', '1234567890', 30, 1000, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));

insert into users values(500,'virendra','geg','vs','sv','ggi','95160',19,16,to_date(2024-11-24),to_date(2024-10-10));

alter table users modify member_start date;
alter table users modify member_end date;

select * from users;

/
----------------------------LIBRARIAN-------------------------------------------
drop table LIBRARIANS;

select * from LIBRARIANS;
CREATE TABLE LIBRARIANS(
LIBRARIAN_ID NUMBER GENERATED 
by default AS IDENTITY (START WITH 100) PRIMARY KEY,
NAME VARCHAR2(40) NOT NULL,
GENDER VARCHAR(15) NOT NULL,
ADDRESS VARCHAR(100),
AGE NUMBER NOT NULL,
EMAIL VARCHAR(100) unique,
PASSWORD VARCHAR(100) not null,
PHONE VARCHAR2(15) NOT NULL
);
insert into LIBRARIANS values(123,'Atul Gupta','Male','House no 123',22,'atul@gmail.com','987654321','9770043661');

--------------------BOOK_CHECKOUT-------------------------------------
drop table BOOK_CHECKOUTS;
select *from BOOK_CHECKOUTS;

CREATE TABLE BOOK_CHECKOUTS(
    CHECKOUT_ID NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 100) PRIMARY KEY,
    BOOK_ID NUMBER NOT NULL,
    USER_ID NUMBER NOT NULL,
    LIBRARIAN_ID NUMBER,
    BOOK_OUT_DATE DATE DEFAULT CURRENT_DATE,
    BOOK_RETURNED_ON DATE,
    BOOK_BOOKED_FOR DATE DEFAULT (CURRENT_DATE + INTERVAL '5' DAY), 
    BOOK_STATUS VARCHAR(15) NOT NULL,
    BOOK_CONDI_DIS VARCHAR(100),
    FINE NUMBER,
    FINE_REASON VARCHAR2(40),
    CONSTRAINT BOOK_CHECKOUT_BOOK_ID_FK 
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    CONSTRAINT BOOK_CHECKOUT_PATRON_FK FOREIGN KEY 
    (USER_ID) REFERENCES users(USER_ID),
    CONSTRAINT BOOK_CHECKOUT_STAFF_ID_FK FOREIGN KEY 
    (LIBRARIAN_ID) REFERENCES LIBRARIANS(LIBRARIAN_ID)
);


---------------- Create the BOOK table----------------------------
truncate table books;
select * from books;

CREATE TABLE BOOKS(
    BOOK_ID NUMBER GENERATED by default AS IDENTITY (START WITH 100) PRIMARY KEY,
    Author_id number not null,
    BOOKNAME VARCHAR(50) NOT NULL,
    TOTALBOOK NUMBER NOT NULL,
    BOOKINSTOCK NUMBER NOT NULL,
    BOOKRESERVED NUMBER NOT NULL,
    BOOKONRENT NUMBER NOT NULL,
    PUBLISHER VARCHAR2(60) NOT NULL
);


commit;

-------------AuthorBookDetails------------------------------------------

CREATE TABLE Authors(
AUTHOR_ID NUMBER GENERATED ALWAYS AS 
IDENTITY (START WITH 100) NOT NULL,
AUTHOR_Name varchar2(40) NOT NULL,
CONSTRAINT AUTHOR_ID_PK PRIMARY KEY(AUTHOR_ID)
);

drop table Authors;

select * from authors;

drop table Author_Book_Details;
----------------transation_table-------------------------------------------
drop table Payment_Details;
select * from Payment_Details;

CREATE TABLE Payment_Details(
TRANSACTION_ID NUMBER GENERATED ALWAYS AS 
IDENTITY (START WITH 100) PRIMARY KEY,
CHECKOUT_ID NUMBER,
USER_ID NUMBER,
AMOUNT NUMBER NOT NULL,
TRANSACTION_TYPE VARCHAR2(10),
TRANSACTION_DATE DATE DEFAULT CURRENT_DATE,
TRANSACTION_REASON VARCHAR2(20),--DEPOSIT, MEMBERSHIP , FINE
CONSTRAINT TRANSATION_TABLE_CHECKOUT_ID_FK FOREIGN KEY 
    (CHECKOUT_ID) REFERENCES BOOK_CHECKOUTS(CHECKOUT_ID),
CONSTRAINT TRANSATION_TABLE_USER_ID_FK FOREIGN KEY 
    (USER_ID) REFERENCES USERS(USER_ID)
);

/
-- Dummy data for Users table
INSERT INTO Users (NAME, PASSWORD, EMAIL, ADDRESS, GENDER, PHONE, AGE, DEPOSITE, MEMBER_START, MEMBER_END)
VALUES
('Alice Smith', 'password123', 'alice@example.com', '456 Elm St, Town', 'Female', '1234567890', 25, 500, TO_DATE('2024-02-15', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));

-- Dummy data for LIBRARIANS table
INSERT INTO LIBRARIANS (NAME, GENDER, ADDRESS, AGE, EMAIL, PASSWORD, PHONE)
VALUES
('Emily Johnson', 'Female', '789 Oak St, Village', 30, 'emily@example.com', 'librarian123', '9876543210');

-- Dummy data for BOOKS table
INSERT INTO BOOKS (BOOKNAME, TOTALBOOK, BOOKINSTOCK, BOOKRESERVED, BOOKONRENT, PUBLISHER)
VALUES
('The Great Gatsby', 10, 7, 2, 1, 'Penguin Classics');

-- Dummy data for Author_Book_Details table
select * from books;

INSERT INTO Author_Book_Details (BOOK_ID, AUTHOR_Name)
VALUES
(123,  'F. Scott Fitzgerald');

select * from Author_Book_Details;

-- Dummy data for BOOKCHECKOUTS table


INSERT INTO BOOK_CHECKOUTS (BOOK_ID, USER_ID, LIBRARIAN_ID, BOOK_OUT_DATE, BOOK_RETURNED_ON, BOOK_STATUS, BOOK_CONDI_DIS, FINE, FINE_REASON)
VALUES
(100, 101, 123, TO_DATE('2024-03-01', 'YYYY-MM-DD'), NULL, 'Checked Out', 'Good condition', NULL, NULL);

-- Dummy data for Payment_Details table
INSERT INTO Payment_Details (CHECKOUT_ID, USER_ID, AMOUNT, TRANSACTION_TYPE, TRANSACTION_REASON)
VALUES
(100, 101, 20, 'FINE', 'Late Return');



select * from librarians;
select * from users;
select * from books;
select * from Payment_Details;
select * from BOOK_CHECKOUTS;
select * from Authors;
/
----------------------------------------------------------Trigger-------------------------------------------------------------------


------------final-------reserved ->to  onrentbook status will change on book--------------------------------------
CREATE OR REPLACE TRIGGER tri_checkout_onrent
AFTER UPDATE ON BOOK_CHECKOUTS
FOR EACH ROW
WHEN (new.BOOK_STATUS = 'OnRent' AND old.LIBRARIAN_ID IS NULL)
BEGIN
    UPDATE BOOKS
    SET BOOKRESERVED = BOOKRESERVED - 1,
        BOOKONRENT = BOOKONRENT + 1 
    WHERE BOOK_ID = :NEW.BOOK_ID;
END;
/
------------final-------on rentbook status will change on book--------------------------------------

create or replace trigger tri_OnReservedCheckout
after insert on BOOK_CHECKOUTS 
for each row
when(staff_id)
begin
update books set 
bookinstock=bookinstock-1 ,
bookreserved=bookreserved+1
where book_id = :new.book_id;
end;
/


-------------------------Book return bookstock increase and book return bookon rent will dicrease --------------------------------------
/
CREATE OR REPLACE TRIGGER tri_checkout_OnReturn
AFTER UPDATE ON BOOK_CHECKOUTS
FOR EACH ROW
WHEN (new.BOOK_STATUS = 'BookReturn' and new.fine_reason is null)
BEGIN
    UPDATE BOOKS
    SET  BOOKONRENT = BOOKONRENT - 1 ,
    bookInStock = bookInStock+1
    WHERE BOOK_ID = :NEW.BOOK_ID;
    
--    UPDATE BOOK_CHECKOUTS
--    SET  Book_returned_on = CURRENT_DATE
--    WHERE book_id=:new.book_id;
END;
/
drop trigger tri_checkout_OnReturn;


/-----------------final-----------------if book not return--------------------------------------------------------------------

CREATE OR REPLACE TRIGGER tri_Book_Not_Return
AFTER UPDATE ON BOOK_CHECKOUTS
FOR EACH ROW
WHEN (new.fine_reason = 'BookNotReturn')
BEGIN
    UPDATE BOOKS
    SET  BOOKONRENT = BOOKONRENT - 1 ,
    totalbook = totalbook - 1 
    WHERE BOOK_ID = :NEW.BOOK_ID;
    
--    UPDATE BOOK_CHECKOUTS
--    SET  Book_returned_on = CURRENT_DATE , fine=1000
--    WHERE book_id=:new.book_id;
END;

/

---------------------------------------------------------------------------------------------------


-----------------------------------------with clause ------------------------------------------


end;
/
drop trigger tri_Bookcheckout;

/

update BOOK_CHECKOUTS set fine_reason = 'BookNotReturn'  where checkout_id=102;

/
commit;
 rollback;
/
delete from books;
delete from book_checkouts;
delete from authors;

select * from librarians;
select * from users;
select * from books;
select * from Payment_Details;
select * from BOOK_CHECKOUTS; 
select * from Authors;
commit;
--SELECT * FROM Authors WHERE author_id = 100;